"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decode = decode;
exports.encode = encode;
exports.serialize = serialize;
exports.create = create;
exports.encryptBlobKey = encryptBlobKey;
exports.decryptBlobKey = decryptBlobKey;
exports.struct = exports.METADATA_LEN_BYTES = void 0;

var _varstruct = _interopRequireWildcard(require("varstruct"));

var _crypto = require("./crypto");

var _util = require("./util");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const METADATA_LEN_BYTES = 256;
exports.METADATA_LEN_BYTES = METADATA_LEN_BYTES;
const struct = (0, _varstruct.default)((0, _util.vsf)([['scrypt', [['salt', (0, _varstruct.Buffer)(32)], ['n', _varstruct.UInt32BE], ['r', _varstruct.UInt32BE], ['p', _varstruct.UInt32BE]]], ['cipher', (0, _util.CStr)(32)], ['blobKey', [['iv', (0, _varstruct.Buffer)(_crypto.IV_LEN_BYTES)], ['authTag', (0, _varstruct.Buffer)(16)], ['key', (0, _varstruct.Buffer)(32)]]], ['blob', [['iv', (0, _varstruct.Buffer)(_crypto.IV_LEN_BYTES)], ['authTag', (0, _varstruct.Buffer)(16)]]]]));
exports.struct = struct;

function decode(metadataBlob) {
  if (metadataBlob.byteLength > METADATA_LEN_BYTES) console.warn('metadata greater than `${METADATA_LEN_BYTES}` bytes, are you sure this is the SECO metadata?');
  return struct.decode(metadataBlob);
}

function encode(metadataObject) {
  return struct.encode(metadataObject);
}

function serialize(metadata) {
  let buf = Buffer.alloc(METADATA_LEN_BYTES);
  encode(metadata).copy(buf);
  return buf;
}

function create(scryptParams = (0, _crypto.createScryptParams)()) {
  return {
    scrypt: scryptParams,
    cipher: 'aes-256-gcm',
    blobKey: {
      iv: Buffer.alloc(_crypto.IV_LEN_BYTES),
      authTag: Buffer.alloc(16),
      key: Buffer.alloc(32)
    },
    blob: {
      iv: Buffer.alloc(_crypto.IV_LEN_BYTES),
      authTag: Buffer.alloc(16)
    }
  };
}

function encryptBlobKey(metadata, passphrase, blobKey) {
  const {
    authTag,
    blob,
    iv,
    salt
  } = (0, _crypto.boxEncrypt)(passphrase, blobKey, metadata.scrypt);
  metadata.scrypt.salt = salt;
  metadata.blobKey = {
    authTag,
    iv,
    key: blob
  };
}

function decryptBlobKey(metadata, passphrase) {
  const blobKey = (0, _crypto.boxDecrypt)(passphrase, metadata.blobKey.key, metadata.blobKey, metadata.scrypt);
  return blobKey;
}