"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vsf = vsf;
exports.CStr = CStr;

var _varstruct = _interopRequireWildcard(require("varstruct"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function vsf(fields) {
  return fields.map(fields => ({
    name: fields[0],
    type: Array.isArray(fields[1]) ? (0, _varstruct.default)(vsf(fields[1])) : fields[1]
  }));
} // zero-terminated C-string (Buffer)


function CStr(length, encoding = 'utf8') {
  let bufferCodec = (0, _varstruct.Buffer)(length);

  function encode(value, buffer, offset) {
    let buf = Buffer.alloc(length);
    buf.write(value, encoding);
    return bufferCodec.encode(buf, buffer, offset);
  }

  function decode(buffer, offset, end) {
    let buf = bufferCodec.decode(buffer, offset, end);
    let i = 0;

    for (; i < buf.length; i++) if (buf[i] === 0) break;

    return buf.slice(0, i).toString(encoding);
  }

  const encodingLength = () => length; // TODO: submit pr on varstruct if 'bytes' is undefined


  encode.bytes = decode.bytes = length;
  return {
    encode,
    decode,
    encodingLength
  };
}