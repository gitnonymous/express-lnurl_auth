"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.encrypt = encrypt;
exports.decrypt = decrypt;

var _randombytes = _interopRequireDefault(require("randombytes"));

var conBlob = _interopRequireWildcard(require("./blob"));

var conHeader = _interopRequireWildcard(require("./header"));

var conMetadata = _interopRequireWildcard(require("./metadata"));

var conFile = _interopRequireWildcard(require("./file"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* flow */
// options: passphrase, blobKey, metdata
function encrypt(data, options = {}) {
  if (!options.header) console.warn('seco: should pass options.header.');
  let header = conHeader.create(options.header);
  let blobKey;
  let metadata;

  if (options.passphrase) {
    blobKey = (0, _randombytes.default)(32);
    metadata = conMetadata.create();
    conMetadata.encryptBlobKey(metadata, options.passphrase, blobKey);
  } else if (options.metadata && options.blobKey) {
    blobKey = options.blobKey;
    metadata = options.metadata;
  } else {
    throw new Error('Must set either passphrase or (metadata and blobKey)');
  }

  data = Buffer.isBuffer(data) ? data : Buffer.from(data, 'utf8');
  let {
    blob: encBlob
  } = conBlob.encrypt(data, metadata, blobKey);
  const headerBuf = conHeader.serialize(header);
  const mdBuf = conMetadata.serialize(metadata);
  let fileObj = {
    header: headerBuf,
    checksum: conFile.computeChecksum(mdBuf, encBlob),
    metadata: mdBuf,
    blob: encBlob
  };
  const encryptedData = conFile.encode(fileObj);
  return {
    encryptedData,
    blobKey,
    metadata
  };
}

function decrypt(encryptedData, passphrase) {
  const fileObj = conFile.decode(encryptedData);
  const checksum = conFile.computeChecksum(fileObj.metadata, fileObj.blob);
  if (!fileObj.checksum.equals(checksum)) throw new Error('seco checksum does not match; data may be corrupted');
  let metadata = conMetadata.decode(fileObj.metadata);
  let blobKey = conMetadata.decryptBlobKey(metadata, passphrase);
  let header = conHeader.decode(fileObj.header);
  let data = conBlob.decrypt(fileObj.blob, metadata, blobKey);
  return {
    data,
    blobKey,
    metadata,
    header
  };
}