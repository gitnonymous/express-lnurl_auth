"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkMagic = checkMagic;
exports.decode = decode;
exports.encode = encode;
exports.serialize = serialize;
exports.create = create;
exports.struct = exports.MAGIC = exports.HEADER_VERSION_TAG = exports.HEADER_LEN_BYTES = void 0;

var _varstruct = _interopRequireWildcard(require("varstruct"));

var _util = require("./util");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// import assert from 'assert'
const HEADER_LEN_BYTES = 224;
exports.HEADER_LEN_BYTES = HEADER_LEN_BYTES;
const HEADER_VERSION_TAG = 'seco-v0-scrypt-aes';
exports.HEADER_VERSION_TAG = HEADER_VERSION_TAG;
const MAGIC = Buffer.from('SECO', 'utf8');
exports.MAGIC = MAGIC;

function checkMagic(magic) {
  if (!magic.equals(MAGIC)) throw new RangeError('Invalid secure container magic.');
}

const struct = (0, _varstruct.default)((0, _util.vsf)([['magic', (0, _varstruct.Bound)(_varstruct.default.Buffer(4), checkMagic)], ['version', _varstruct.UInt32BE], // should be all 0's for now
['reserved', _varstruct.UInt32BE], // should be all 0's for now
['versionTag', (0, _varstruct.VarString)(_varstruct.UInt8)], ['appName', (0, _varstruct.VarString)(_varstruct.UInt8, 'utf-8')], ['appVersion', (0, _varstruct.VarString)(_varstruct.UInt8, 'utf-8')]]));
exports.struct = struct;

function decode(headerBlob) {
  if (headerBlob.byteLength > HEADER_LEN_BYTES) console.warn(`header greater than ${HEADER_LEN_BYTES} bytes, are you sure this is the header?`);
  return struct.decode(headerBlob);
}

function encode(header) {
  return struct.encode(header);
}

function serialize(header) {
  let buf = Buffer.alloc(HEADER_LEN_BYTES);
  encode(header).copy(buf);
  return buf;
} // TODO: fetch parent module and include this info by default


function create({
  appName,
  appVersion
} = {
  appName: '',
  appVersion: ''
}) {
  return {
    magic: MAGIC,
    version: 0,
    reserved: 0,
    versionTag: HEADER_VERSION_TAG,
    appName,
    appVersion
  };
}