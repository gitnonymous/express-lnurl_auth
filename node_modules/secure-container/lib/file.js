"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decode = decode;
exports.encode = encode;
exports.computeChecksum = computeChecksum;
exports.checkContents = checkContents;
exports.struct = void 0;

var _varstruct = _interopRequireWildcard(require("varstruct"));

var _buffer = require("./buffer");

var scCrypto = _interopRequireWildcard(require("./crypto"));

var _util = require("./util");

var _header = require("./header");

var _metadata = require("./metadata");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const struct = (0, _varstruct.default)((0, _util.vsf)([['header', (0, _varstruct.Buffer)(_header.HEADER_LEN_BYTES)], ['checksum', (0, _varstruct.Buffer)(32)], ['metadata', (0, _varstruct.Buffer)(_metadata.METADATA_LEN_BYTES)], ['blob', (0, _varstruct.VarBuffer)(_varstruct.UInt32BE)]]));
exports.struct = struct;

function decode(fileContents) {
  return struct.decode(fileContents);
}

function encode(fileContents) {
  return struct.encode(fileContents);
}

function computeChecksum(metadata, blob) {
  return scCrypto.sha256(Buffer.concat([metadata, (0, _buffer.fromUInt32BE)(blob.byteLength), blob]));
}

function checkContents(fileContents) {
  let fileObj = decode(fileContents);
  return fileObj.checksum.equals(computeChecksum(fileObj.metadata, fileObj.blob));
}